<!DOCTYPE html>
<html>
  <head>
    <title>WhatsApp Login - Debug</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        text-align: center;
        padding: 20px;
      }
      .loading {
        color: #666;
      }
      .qr-container {
        margin: 20px 0;
      }
      .status {
        margin: 10px 0;
        padding: 10px;
        border-radius: 5px;
      }
      .error {
        background-color: #ffebee;
        color: #c62828;
      }
      .success {
        background-color: #e8f5e8;
        color: #2e7d32;
      }
      .btn {
        padding: 8px 16px;
        margin: 5px;
        border: none;
        border-radius: 3px;
        cursor: pointer;
        background-color: #007bff;
        color: white;
      }
      .actions {
        margin: 20px 0;
      }
    </style>
  </head>
  <body>
    <h1>WhatsApp Login (Debug Mode)</h1>
    <div id="status"></div>
    <% if (qr) { %>
    <p>Scan QR code below with WhatsApp:</p>
    <div class="qr-container">
      <img src="<%= qr %>" alt="QR Code" />
    </div>
    <% } else { %>
    <p class="loading">Waiting for QR code...</p>
    <% } %>
    
    <div class="actions">
      <button onclick="clearSession()" class="btn">Clear Session</button>
      <button onclick="forceRestart()" class="btn">Force Restart</button>
      <button onclick="showDebug()" class="btn">Debug Info</button>
    </div>
    
    <script>
      let retryCount = 0;
      const maxRetries = 10;
      
      function updateStatus(message, type = 'info') {
        const statusDiv = document.getElementById('status');
        statusDiv.innerHTML = `<div class="status ${type}">${message}</div>`;
      }
      
      async function clearSession() {
        try {
          updateStatus('Clearing session...', 'loading');
          await fetch('/debug/clear-session', { method: 'POST' });
          updateStatus('Session cleared! Restarting...', 'success');
          setTimeout(() => location.reload(), 2000);
        } catch (error) {
          updateStatus('Error clearing session', 'error');
        }
      }
      
      async function forceRestart() {
        try {
          updateStatus('Forcing restart...', 'loading');
          await fetch('/debug/force-restart', { method: 'POST' });
          updateStatus('Restart initiated!', 'success');
          setTimeout(() => location.reload(), 3000);
        } catch (error) {
          updateStatus('Error restarting', 'error');
        }
      }
      
      async function showDebug() {
        try {
          const res = await fetch('/debug/qr-raw');
          const data = await res.json();
          const debugInfo = `
hasQR: ${data.hasQR}
qrLength: ${data.qrLength}
clientReady: ${data.clientReady}
restarting: ${data.restarting}`;
          alert('Debug Info:' + debugInfo);
        } catch (error) {
          alert('Error getting debug info: ' + error.message);
        }
      }
      
      async function checkStatus() {
        try {
          const res = await fetch("/qr");
          const data = await res.json();
          
          if (data.waState) {
            updateStatus('Connected! Redirecting...', 'success');
            setTimeout(() => {
              window.location.href = "/";
            }, 1000);
          } else if (data.qr) {
            const img = document.querySelector("img");
            if (img) {
              img.src = data.qr;
            } else {
              const container = document.querySelector(".qr-container") || document.body;
              container.innerHTML = `<div class="qr-container"><img src="${data.qr}" alt="QR Code" /></div>`;
            }
            updateStatus('QR Code ready - please scan with WhatsApp');
            retryCount = 0;
          } else {
            updateStatus('Generating QR code...', 'loading');
            
            // Debug after many retries
            if (retryCount > 5) {
              try {
                const debugRes = await fetch("/debug/qr-raw");
                const debugData = await debugRes.json();
                console.log('Debug info:', debugData);
                updateStatus(`Debug: hasQR=${debugData.hasQR}, restarting=${debugData.restarting}`, 'error');
              } catch (debugError) {
                console.error('Debug request failed:', debugError);
              }
            }
          }
        } catch (error) {
          retryCount++;
          console.error('Status check error:', error);
          
          if (retryCount >= maxRetries) {
            updateStatus('Connection error. Please refresh the page.', 'error');
            return;
          }
          
          updateStatus(`Connection issue (retry ${retryCount}/${maxRetries})...`, 'error');
        }
      }
      
      // Initial check
      checkStatus();
      
      // Poll every 3 seconds
      setInterval(checkStatus, 3000);
    </script>
  </body>
</html>